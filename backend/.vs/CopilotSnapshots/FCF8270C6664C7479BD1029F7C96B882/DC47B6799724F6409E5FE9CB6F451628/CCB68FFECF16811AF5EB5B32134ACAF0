using Xunit;
using Moq;
using TodoList.Application.DTOs;
using TodoList.Application.UseCases;
using TodoList.Domain;
using TodoList.Domain.Interfaces;

namespace TodoList.Tests.UseCases;

public class UpdateTaskUseCaseTests
{
    private readonly Mock<ITaskRepository> _mockRepository;
    private readonly UpdateTaskUseCase _useCase;

    public UpdateTaskUseCaseTests()
    {
        _mockRepository = new Mock<ITaskRepository>();
        _useCase = new UpdateTaskUseCase(_mockRepository.Object);
    }

    [Fact]
    public async Task ExecuteAsync_WithValidData_ShouldUpdateTaskSuccessfully()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto 
        { 
            Title = "Updated Task", 
            IsCompleted = true 
        };

        var existingTask = new TaskEntity
        {
            Id = taskId,
            Title = "Original Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow.AddDays(-1)
        };

        var updatedTask = new TaskEntity
        {
            Id = taskId,
            Title = "Updated Task",
            IsCompleted = true,
            CreatedAt = existingTask.CreatedAt
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.UpdateTask(It.IsAny<TaskEntity>()))
                      .ReturnsAsync(updatedTask);

        // Act
        var result = await _useCase.ExecuteAsync(taskId, updateTaskDto);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(updatedTask.Id, result.Id);
        Assert.Equal(updatedTask.Title, result.Title);
        Assert.Equal(updatedTask.IsCompleted, result.IsCompleted);
        Assert.Equal(updatedTask.CreatedAt, result.CreatedAt);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.UpdateTask(It.Is<TaskEntity>(t => 
            t.Title == updateTaskDto.Title && 
            t.IsCompleted == updateTaskDto.IsCompleted)), Times.Once);
    }

    [Fact]
    public async Task ExecuteAsync_WithZeroId_ShouldThrowArgumentException()
    {
        // Arrange
        var invalidId = 0;
        var updateTaskDto = new UpdateTaskDto { Title = "Valid Title", IsCompleted = false };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(
            () => _useCase.ExecuteAsync(invalidId, updateTaskDto));

        Assert.Equal("ID deve ser maior que zero. (Parameter 'id')", exception.Message);
        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_WithNegativeId_ShouldThrowArgumentException()
    {
        // Arrange
        var invalidId = -1;
        var updateTaskDto = new UpdateTaskDto { Title = "Valid Title", IsCompleted = false };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(
            () => _useCase.ExecuteAsync(invalidId, updateTaskDto));

        Assert.Equal("ID deve ser maior que zero. (Parameter 'id')", exception.Message);
        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_WithNullTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = null!, IsCompleted = false };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(
            () => _useCase.ExecuteAsync(taskId, updateTaskDto));

        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);
        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_WithEmptyTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "", IsCompleted = false };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(
            () => _useCase.ExecuteAsync(taskId, updateTaskDto));

        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);
        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_WithWhitespaceTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "   ", IsCompleted = false };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(
            () => _useCase.ExecuteAsync(taskId, updateTaskDto));

        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);
        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_WithNonExistentId_ShouldThrowInvalidOperationException()
    {
        // Arrange
        var taskId = 999;
        var updateTaskDto = new UpdateTaskDto { Title = "Valid Title", IsCompleted = false };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync((TaskEntity?)null);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(
            () => _useCase.ExecuteAsync(taskId, updateTaskDto));

        Assert.Equal($"Tarefa com ID {taskId} não encontrada.", exception.Message);
        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_GetTaskByIdThrowsException_ShouldPropagateException()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "Valid Title", IsCompleted = false };
        var expectedMessage = "Database error on get";

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ThrowsAsync(new Exception(expectedMessage));

        // Act & Assert
        var exception = await Assert.ThrowsAsync<Exception>(
            () => _useCase.ExecuteAsync(taskId, updateTaskDto));

        Assert.Equal(expectedMessage, exception.Message);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_UpdateTaskThrowsException_ShouldPropagateException()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "Valid Title", IsCompleted = false };
        var existingTask = new TaskEntity
        {
            Id = taskId,
            Title = "Original Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };
        var expectedMessage = "Database error on update";

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.UpdateTask(It.IsAny<TaskEntity>()))
                      .ThrowsAsync(new Exception(expectedMessage));

        // Act & Assert
        var exception = await Assert.ThrowsAsync<Exception>(
            () => _useCase.ExecuteAsync(taskId, updateTaskDto));

        Assert.Equal(expectedMessage, exception.Message);
        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<TaskEntity>()), Times.Once);
    }

    [Fact]
    public async Task ExecuteAsync_UpdateCompletionStatus_ShouldUpdateCorrectly()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "Task Title", IsCompleted = true };

        var existingTask = new TaskEntity
        {
            Id = taskId,
            Title = "Task Title",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow.AddHours(-2)
        };

        var updatedTask = new TaskEntity
        {
            Id = taskId,
            Title = "Task Title",
            IsCompleted = true,
            CreatedAt = existingTask.CreatedAt
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.UpdateTask(It.IsAny<TaskEntity>()))
                      .ReturnsAsync(updatedTask);

        // Act
        var result = await _useCase.ExecuteAsync(taskId, updateTaskDto);

        // Assert
        Assert.NotNull(result);
        Assert.True(result.IsCompleted);
        Assert.Equal(existingTask.CreatedAt, result.CreatedAt); // CreatedAt should not change

        _mockRepository.Verify(r => r.UpdateTask(It.Is<TaskEntity>(t => 
            t.IsCompleted == true)), Times.Once);
    }
}