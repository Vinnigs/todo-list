using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Moq;
using TodoList.Api.Controllers;
using TodoList.Application.DTOs;
using TodoList.Application.UseCases;
using Xunit;

namespace TodoList.Tests.Controllers;

public class TaskControllerTests
{
    private readonly Mock<CreateTaskUseCase> _mockCreateTaskUseCase;
    private readonly Mock<GetAllTasksUseCase> _mockGetAllTasksUseCase;
    private readonly Mock<GetTaskByIdUseCase> _mockGetTaskByIdUseCase;
    private readonly Mock<UpdateTaskUseCase> _mockUpdateTaskUseCase;
    private readonly Mock<DeleteTaskUseCase> _mockDeleteTaskUseCase;
    private readonly TaskController _controller;

    public TaskControllerTests()
    {
        _mockCreateTaskUseCase = new Mock<CreateTaskUseCase>();
        _mockGetAllTasksUseCase = new Mock<GetAllTasksUseCase>();
        _mockGetTaskByIdUseCase = new Mock<GetTaskByIdUseCase>();
        _mockUpdateTaskUseCase = new Mock<UpdateTaskUseCase>();
        _mockDeleteTaskUseCase = new Mock<DeleteTaskUseCase>();

        _controller = new TaskController(
            _mockCreateTaskUseCase.Object,
            _mockGetAllTasksUseCase.Object,
            _mockGetTaskByIdUseCase.Object,
            _mockUpdateTaskUseCase.Object,
            _mockDeleteTaskUseCase.Object);
    }

    #region CreateTask Tests

    [Fact]
    public async Task CreateTask_WithValidData_ShouldReturnCreatedResult()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "Test Task" };
        var expectedResponse = new TaskResponseDto
        {
            Id = 1,
            Title = "Test Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockCreateTaskUseCase.Setup(x => x.ExecuteAsync(createTaskDto))
                              .ReturnsAsync(expectedResponse);

        // Act
        var result = await _controller.CreateTask(createTaskDto);

        // Assert
        var createdResult = Assert.IsType<CreatedAtActionResult>(result);
        Assert.Equal(StatusCodes.Status201Created, createdResult.StatusCode);
        Assert.Equal(nameof(_controller.GetTaskById), createdResult.ActionName);
        Assert.Equal(expectedResponse.Id, ((dynamic)createdResult.RouteValues!).id);
        Assert.Equal(expectedResponse, createdResult.Value);

        _mockCreateTaskUseCase.Verify(x => x.ExecuteAsync(createTaskDto), Times.Once);
    }

    [Fact]
    public async Task CreateTask_WithInvalidModelState_ShouldReturnBadRequest()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "" };
        _controller.ModelState.AddModelError("Title", "Título é obrigatório");

        // Act
        var result = await _controller.CreateTask(createTaskDto);

        // Assert
        var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
        Assert.Equal(StatusCodes.Status400BadRequest, badRequestResult.StatusCode);

        _mockCreateTaskUseCase.Verify(x => x.ExecuteAsync(It.IsAny<CreateTaskDto>()), Times.Never);
    }

    [Fact]
    public async Task CreateTask_WhenUseCaseThrowsException_ShouldPropagateException()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "Test Task" };
        var expectedException = new ArgumentException("Título é obrigatório");

        _mockCreateTaskUseCase.Setup(x => x.ExecuteAsync(createTaskDto))
                              .ThrowsAsync(expectedException);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.CreateTask(createTaskDto));
        Assert.Equal(expectedException.Message, exception.Message);

        _mockCreateTaskUseCase.Verify(x => x.ExecuteAsync(createTaskDto), Times.Once);
    }

    #endregion

    #region GetAllTasks Tests

    [Fact]
    public async Task GetAllTasks_ShouldReturnOkWithTaskList()
    {
        // Arrange
        var expectedTasks = new List<TaskResponseDto>
        {
            new() { Id = 1, Title = "Task 1", IsCompleted = false, CreatedAt = DateTime.UtcNow },
            new() { Id = 2, Title = "Task 2", IsCompleted = true, CreatedAt = DateTime.UtcNow.AddHours(-1) }
        };

        _mockGetAllTasksUseCase.Setup(x => x.ExecuteAsync())
                               .ReturnsAsync(expectedTasks);

        // Act
        var result = await _controller.GetAllTasks();

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        Assert.Equal(expectedTasks, okResult.Value);

        _mockGetAllTasksUseCase.Verify(x => x.ExecuteAsync(), Times.Once);
    }

    [Fact]
    public async Task GetAllTasks_WithEmptyList_ShouldReturnOkWithEmptyList()
    {
        // Arrange
        var expectedTasks = new List<TaskResponseDto>();

        _mockGetAllTasksUseCase.Setup(x => x.ExecuteAsync())
                               .ReturnsAsync(expectedTasks);

        // Act
        var result = await _controller.GetAllTasks();

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        Assert.Equal(expectedTasks, okResult.Value);

        _mockGetAllTasksUseCase.Verify(x => x.ExecuteAsync(), Times.Once);
    }

    [Fact]
    public async Task GetAllTasks_WhenUseCaseThrowsException_ShouldPropagateException()
    {
        // Arrange
        var expectedException = new InvalidOperationException("Database error");

        _mockGetAllTasksUseCase.Setup(x => x.ExecuteAsync())
                               .ThrowsAsync(expectedException);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _controller.GetAllTasks());
        Assert.Equal(expectedException.Message, exception.Message);

        _mockGetAllTasksUseCase.Verify(x => x.ExecuteAsync(), Times.Once);
    }

    #endregion

    #region GetTaskById Tests

    [Fact]
    public async Task GetTaskById_WithValidId_ShouldReturnOkWithTask()
    {
        // Arrange
        var taskId = 1;
        var expectedTask = new TaskResponseDto
        {
            Id = taskId,
            Title = "Test Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockGetTaskByIdUseCase.Setup(x => x.ExecuteAsync(taskId))
                               .ReturnsAsync(expectedTask);

        // Act
        var result = await _controller.GetTaskById(taskId);

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        Assert.Equal(expectedTask, okResult.Value);

        _mockGetTaskByIdUseCase.Verify(x => x.ExecuteAsync(taskId), Times.Once);
    }

    [Fact]
    public async Task GetTaskById_WithNonExistentId_ShouldReturnNotFound()
    {
        // Arrange
        var taskId = 999;

        _mockGetTaskByIdUseCase.Setup(x => x.ExecuteAsync(taskId))
                               .ReturnsAsync((TaskResponseDto?)null);

        // Act
        var result = await _controller.GetTaskById(taskId);

        // Assert
        var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
        Assert.Equal(StatusCodes.Status404NotFound, notFoundResult.StatusCode);
        
        var responseValue = notFoundResult.Value;
        Assert.NotNull(responseValue);
        var message = responseValue.GetType().GetProperty("message")?.GetValue(responseValue);
        Assert.Equal($"Tarefa com ID {taskId} não encontrada", message);

        _mockGetTaskByIdUseCase.Verify(x => x.ExecuteAsync(taskId), Times.Once);
    }

    [Fact]
    public async Task GetTaskById_WhenUseCaseThrowsArgumentException_ShouldPropagateException()
    {
        // Arrange
        var taskId = 0;
        var expectedException = new ArgumentException("Id deve ser maior que zero");

        _mockGetTaskByIdUseCase.Setup(x => x.ExecuteAsync(taskId))
                               .ThrowsAsync(expectedException);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.GetTaskById(taskId));
        Assert.Equal(expectedException.Message, exception.Message);

        _mockGetTaskByIdUseCase.Verify(x => x.ExecuteAsync(taskId), Times.Once);
    }

    #endregion

    #region UpdateTask Tests

    [Fact]
    public async Task UpdateTask_WithValidData_ShouldReturnOkWithUpdatedTask()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };
        var expectedResponse = new TaskResponseDto
        {
            Id = taskId,
            Title = "Updated Task",
            IsCompleted = true,
            CreatedAt = DateTime.UtcNow.AddHours(-1)
        };

        _mockUpdateTaskUseCase.Setup(x => x.ExecuteAsync(taskId, updateTaskDto))
                              .ReturnsAsync(expectedResponse);

        // Act
        var result = await _controller.UpdateTask(taskId, updateTaskDto);

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        Assert.Equal(expectedResponse, okResult.Value);

        _mockUpdateTaskUseCase.Verify(x => x.ExecuteAsync(taskId, updateTaskDto), Times.Once);
    }

    [Fact]
    public async Task UpdateTask_WithInvalidModelState_ShouldReturnBadRequest()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "", IsCompleted = true };
        _controller.ModelState.AddModelError("Title", "Título é obrigatório");

        // Act
        var result = await _controller.UpdateTask(taskId, updateTaskDto);

        // Assert
        var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
        Assert.Equal(StatusCodes.Status400BadRequest, badRequestResult.StatusCode);

        _mockUpdateTaskUseCase.Verify(x => x.ExecuteAsync(It.IsAny<int>(), It.IsAny<UpdateTaskDto>()), Times.Never);
    }

    [Fact]
    public async Task UpdateTask_WithNonExistentId_ShouldReturnNotFound()
    {
        // Arrange
        var taskId = 999;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };

        _mockUpdateTaskUseCase.Setup(x => x.ExecuteAsync(taskId, updateTaskDto))
                              .ReturnsAsync((TaskResponseDto?)null);

        // Act
        var result = await _controller.UpdateTask(taskId, updateTaskDto);

        // Assert
        var notFoundResult = Assert.IsType<NotFoundObjectResult>(result);
        Assert.Equal(StatusCodes.Status404NotFound, notFoundResult.StatusCode);
        
        var responseValue = notFoundResult.Value;
        Assert.NotNull(responseValue);
        var message = responseValue.GetType().GetProperty("message")?.GetValue(responseValue);
        Assert.Equal($"Tarefa com ID {taskId} não encontrada", message);

        _mockUpdateTaskUseCase.Verify(x => x.ExecuteAsync(taskId, updateTaskDto), Times.Once);
    }

    [Fact]
    public async Task UpdateTask_WhenUseCaseThrowsArgumentException_ShouldPropagateException()
    {
        // Arrange
        var taskId = 0;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };
        var expectedException = new ArgumentException("ID deve ser maior que zero");

        _mockUpdateTaskUseCase.Setup(x => x.ExecuteAsync(taskId, updateTaskDto))
                              .ThrowsAsync(expectedException);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.UpdateTask(taskId, updateTaskDto));
        Assert.Equal(expectedException.Message, exception.Message);

        _mockUpdateTaskUseCase.Verify(x => x.ExecuteAsync(taskId, updateTaskDto), Times.Once);
    }

    #endregion

    #region DeleteTask Tests

    [Fact]
    public async Task DeleteTask_WithValidId_ShouldReturnNoContent()
    {
        // Arrange
        var taskId = 1;

        _mockDeleteTaskUseCase.Setup(x => x.ExecuteAsync(taskId))
                              .Returns(Task.CompletedTask);

        // Act
        var result = await _controller.DeleteTask(taskId);

        // Assert
        var noContentResult = Assert.IsType<NoContentResult>(result);
        Assert.Equal(StatusCodes.Status204NoContent, noContentResult.StatusCode);

        _mockDeleteTaskUseCase.Verify(x => x.ExecuteAsync(taskId), Times.Once);
    }

    [Fact]
    public async Task DeleteTask_WhenUseCaseThrowsArgumentException_ShouldPropagateException()
    {
        // Arrange
        var taskId = 0;
        var expectedException = new ArgumentException("ID deve ser maior que zero");

        _mockDeleteTaskUseCase.Setup(x => x.ExecuteAsync(taskId))
                              .ThrowsAsync(expectedException);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.DeleteTask(taskId));
        Assert.Equal(expectedException.Message, exception.Message);

        _mockDeleteTaskUseCase.Verify(x => x.ExecuteAsync(taskId), Times.Once);
    }

    [Fact]
    public async Task DeleteTask_WhenUseCaseThrowsInvalidOperationException_ShouldPropagateException()
    {
        // Arrange
        var taskId = 999;
        var expectedException = new InvalidOperationException("Tarefa com ID 999 não encontrada.");

        _mockDeleteTaskUseCase.Setup(x => x.ExecuteAsync(taskId))
                              .ThrowsAsync(expectedException);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _controller.DeleteTask(taskId));
        Assert.Equal(expectedException.Message, exception.Message);

        _mockDeleteTaskUseCase.Verify(x => x.ExecuteAsync(taskId), Times.Once);
    }

    #endregion
}