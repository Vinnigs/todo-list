using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Moq;
using TodoList.Api.Controllers;
using TodoList.Application.DTOs;
using TodoList.Application.UseCases;
using TodoList.Domain.Interfaces;
using Xunit;

namespace TodoList.Tests.Controllers;

public class TaskControllerTests
{
    private readonly Mock<ITaskRepository> _mockRepository;
    private readonly CreateTaskUseCase _createTaskUseCase;
    private readonly GetAllTasksUseCase _getAllTasksUseCase;
    private readonly GetTaskByIdUseCase _getTaskByIdUseCase;
    private readonly UpdateTaskUseCase _updateTaskUseCase;
    private readonly DeleteTaskUseCase _deleteTaskUseCase;
    private readonly TaskController _controller;

    public TaskControllerTests()
    {
        _mockRepository = new Mock<ITaskRepository>();
        
        _createTaskUseCase = new CreateTaskUseCase(_mockRepository.Object);
        _getAllTasksUseCase = new GetAllTasksUseCase(_mockRepository.Object);
        _getTaskByIdUseCase = new GetTaskByIdUseCase(_mockRepository.Object);
        _updateTaskUseCase = new UpdateTaskUseCase(_mockRepository.Object);
        _deleteTaskUseCase = new DeleteTaskUseCase(_mockRepository.Object);

        _controller = new TaskController(
            _createTaskUseCase,
            _getAllTasksUseCase,
            _getTaskByIdUseCase,
            _updateTaskUseCase,
            _deleteTaskUseCase);
    }

    #region CreateTask Tests

    [Fact]
    public async Task CreateTask_WithValidData_ShouldReturnCreatedResult()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "Test Task" };
        var expectedTask = new Domain.TaskEntity
        {
            Id = 1,
            Title = "Test Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()))
                      .ReturnsAsync(expectedTask);

        // Act
        var result = await _controller.CreateTask(createTaskDto);

        // Assert
        var createdResult = Assert.IsType<CreatedAtActionResult>(result);
        Assert.Equal(StatusCodes.Status201Created, createdResult.StatusCode);
        Assert.Equal(nameof(_controller.GetTaskById), createdResult.ActionName);
        Assert.Equal(expectedTask.Id, ((dynamic)createdResult.RouteValues!).id);
        
        var responseDto = Assert.IsType<TaskResponseDto>(createdResult.Value);
        Assert.Equal(expectedTask.Id, responseDto.Id);
        Assert.Equal(expectedTask.Title, responseDto.Title);
        Assert.Equal(expectedTask.IsCompleted, responseDto.IsCompleted);

        _mockRepository.Verify(r => r.CreateTask(It.Is<Domain.TaskEntity>(t => 
            t.Title == createTaskDto.Title && 
            t.IsCompleted == false)), Times.Once);
    }

    [Fact]
    public async Task CreateTask_WithInvalidModelState_ShouldReturnBadRequest()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "" };
        _controller.ModelState.AddModelError("Title", "Título é obrigatório");

        // Act
        var result = await _controller.CreateTask(createTaskDto);

        // Assert
        var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
        Assert.Equal(StatusCodes.Status400BadRequest, badRequestResult.StatusCode);

        _mockRepository.Verify(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task CreateTask_WithNullTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = null! };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.CreateTask(createTaskDto));
        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);

        _mockRepository.Verify(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task CreateTask_WithEmptyTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "" };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.CreateTask(createTaskDto));
        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);

        _mockRepository.Verify(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task CreateTask_WithWhitespaceTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "   " };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.CreateTask(createTaskDto));
        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);

        _mockRepository.Verify(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task CreateTask_WithValidLongTitle_ShouldReturnCreatedResult()
    {
        // Arrange
        var longTitle = new string('A', 200); // Maximum allowed length
        var createTaskDto = new CreateTaskDto { Title = longTitle };
        var expectedTask = new Domain.TaskEntity
        {
            Id = 1,
            Title = longTitle,
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()))
                      .ReturnsAsync(expectedTask);

        // Act
        var result = await _controller.CreateTask(createTaskDto);

        // Assert
        var createdResult = Assert.IsType<CreatedAtActionResult>(result);
        Assert.Equal(StatusCodes.Status201Created, createdResult.StatusCode);
        
        var responseDto = Assert.IsType<TaskResponseDto>(createdResult.Value);
        Assert.Equal(expectedTask.Title, responseDto.Title);

        _mockRepository.Verify(r => r.CreateTask(It.Is<Domain.TaskEntity>(t => t.Title == longTitle)), Times.Once);
    }

    #endregion

    #region GetAllTasks Tests

    [Fact]
    public async Task GetAllTasks_ShouldReturnOkWithTaskList()
    {
        // Arrange
        var expectedTasks = new List<Domain.TaskEntity>
        {
            new() { Id = 1, Title = "Task 1", IsCompleted = false, CreatedAt = DateTime.UtcNow },
            new() { Id = 2, Title = "Task 2", IsCompleted = true, CreatedAt = DateTime.UtcNow.AddHours(-1) }
        };

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(expectedTasks);

        // Act
        var result = await _controller.GetAllTasks();

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        
        var responseDtos = Assert.IsAssignableFrom<IEnumerable<TaskResponseDto>>(okResult.Value);
        var responseList = responseDtos.ToList();
        
        Assert.Equal(expectedTasks.Count, responseList.Count);
        Assert.Equal(expectedTasks[0].Id, responseList[0].Id);
        Assert.Equal(expectedTasks[0].Title, responseList[0].Title);
        Assert.Equal(expectedTasks[1].Id, responseList[1].Id);
        Assert.Equal(expectedTasks[1].Title, responseList[1].Title);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    [Fact]
    public async Task GetAllTasks_WithEmptyList_ShouldReturnOkWithEmptyList()
    {
        // Arrange
        var expectedTasks = new List<Domain.TaskEntity>();

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(expectedTasks);

        // Act
        var result = await _controller.GetAllTasks();

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        
        var responseDtos = Assert.IsAssignableFrom<IEnumerable<TaskResponseDto>>(okResult.Value);
        Assert.Empty(responseDtos);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    [Fact]
    public async Task GetAllTasks_WithMixedCompletionStatus_ShouldReturnAllTasks()
    {
        // Arrange
        var expectedTasks = new List<Domain.TaskEntity>
        {
            new() { Id = 1, Title = "Pending Task", IsCompleted = false, CreatedAt = DateTime.UtcNow },
            new() { Id = 2, Title = "Completed Task", IsCompleted = true, CreatedAt = DateTime.UtcNow.AddDays(-1) },
            new() { Id = 3, Title = "Another Pending", IsCompleted = false, CreatedAt = DateTime.UtcNow.AddHours(-2) }
        };

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(expectedTasks);

        // Act
        var result = await _controller.GetAllTasks();

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        var responseDtos = Assert.IsAssignableFrom<IEnumerable<TaskResponseDto>>(okResult.Value);
        var responseList = responseDtos.ToList();
        
        Assert.Equal(3, responseList.Count);
        Assert.Contains(responseList, t => t.Title == "Pending Task" && !t.IsCompleted);
        Assert.Contains(responseList, t => t.Title == "Completed Task" && t.IsCompleted);
        Assert.Contains(responseList, t => t.Title == "Another Pending" && !t.IsCompleted);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    #endregion

    #region GetTaskById Tests

    [Fact]
    public async Task GetTaskById_WithValidId_ShouldReturnOkWithTask()
    {
        // Arrange
        var taskId = 1;
        var expectedTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Test Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(expectedTask);

        // Act
        var result = await _controller.GetTaskById(taskId);

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        
        var responseDto = Assert.IsType<TaskResponseDto>(okResult.Value);
        Assert.Equal(expectedTask.Id, responseDto.Id);
        Assert.Equal(expectedTask.Title, responseDto.Title);
        Assert.Equal(expectedTask.IsCompleted, responseDto.IsCompleted);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
    }

    [Fact]
    public async Task GetTaskById_WithNonExistentId_ShouldThrowException()
    {
        // Arrange
        var taskId = 999;

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync((Domain.TaskEntity?)null);

        // Act & Assert
        // Based on the UseCase implementation, it throws an Exception when task is not found
        var exception = await Assert.ThrowsAsync<Exception>(() => _controller.GetTaskById(taskId));
        Assert.Equal($"Tarefa com ID {taskId} não encontrada.", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
    }

    [Fact]
    public async Task GetTaskById_WithZeroId_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 0;

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.GetTaskById(taskId));
        Assert.Equal("Id deve ser maior que zero. (Parameter 'id')", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
    }

    #endregion

    #region UpdateTask Tests

    [Fact]
    public async Task UpdateTask_WithValidData_ShouldReturnOkWithUpdatedTask()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };
        var existingTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Original Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow.AddHours(-1)
        };
        var updatedTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Updated Task",
            IsCompleted = true,
            CreatedAt = existingTask.CreatedAt
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()))
                      .ReturnsAsync(updatedTask);

        // Act
        var result = await _controller.UpdateTask(taskId, updateTaskDto);

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        
        var responseDto = Assert.IsType<TaskResponseDto>(okResult.Value);
        Assert.Equal(updatedTask.Id, responseDto.Id);
        Assert.Equal(updatedTask.Title, responseDto.Title);
        Assert.Equal(updatedTask.IsCompleted, responseDto.IsCompleted);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.UpdateTask(It.Is<Domain.TaskEntity>(t => 
            t.Title == updateTaskDto.Title && 
            t.IsCompleted == updateTaskDto.IsCompleted)), Times.Once);
    }

    [Fact]
    public async Task UpdateTask_WithInvalidModelState_ShouldReturnBadRequest()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "", IsCompleted = true };
        _controller.ModelState.AddModelError("Title", "Título é obrigatório");

        // Act
        var result = await _controller.UpdateTask(taskId, updateTaskDto);

        // Assert
        var badRequestResult = Assert.IsType<BadRequestObjectResult>(result);
        Assert.Equal(StatusCodes.Status400BadRequest, badRequestResult.StatusCode);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task UpdateTask_WithNonExistentId_ShouldThrowInvalidOperationException()
    {
        // Arrange
        var taskId = 999;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync((Domain.TaskEntity?)null);

        // Act & Assert
        // Based on the UseCase implementation, it throws InvalidOperationException when task is not found
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _controller.UpdateTask(taskId, updateTaskDto));
        Assert.Equal($"Tarefa com ID {taskId} não encontrada.", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task UpdateTask_WithZeroId_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 0;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.UpdateTask(taskId, updateTaskDto));
        Assert.Equal("ID deve ser maior que zero. (Parameter 'id')", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task UpdateTask_WithNullTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = null!, IsCompleted = true };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.UpdateTask(taskId, updateTaskDto));
        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    [Fact]
    public async Task UpdateTask_WithEmptyTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "", IsCompleted = true };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.UpdateTask(taskId, updateTaskDto));
        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    #endregion

    #region DeleteTask Tests

    [Fact]
    public async Task DeleteTask_WithValidId_ShouldReturnNoContent()
    {
        // Arrange
        var taskId = 1;
        var existingTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Task to Delete",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.DeleteTask(taskId))
                      .Returns(Task.CompletedTask);

        // Act
        var result = await _controller.DeleteTask(taskId);

        // Assert
        var noContentResult = Assert.IsType<NoContentResult>(result);
        Assert.Equal(StatusCodes.Status204NoContent, noContentResult.StatusCode);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.DeleteTask(taskId), Times.Once);
    }

    [Fact]
    public async Task DeleteTask_WithZeroId_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 0;

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.DeleteTask(taskId));
        Assert.Equal("ID deve ser maior que zero", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.DeleteTask(It.IsAny<int>()), Times.Never);
    }

    [Fact]
    public async Task DeleteTask_WithNonExistentId_ShouldThrowInvalidOperationException()
    {
        // Arrange
        var taskId = 999;

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync((Domain.TaskEntity?)null);

        // Act & Assert
        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _controller.DeleteTask(taskId));
        Assert.Equal($"Tarefa com ID {taskId} não encontrada.", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.DeleteTask(It.IsAny<int>()), Times.Never);
    }

    #endregion
}