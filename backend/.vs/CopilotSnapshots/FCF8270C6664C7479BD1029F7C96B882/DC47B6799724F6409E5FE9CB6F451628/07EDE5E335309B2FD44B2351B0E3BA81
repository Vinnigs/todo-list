using Xunit;
using Moq;
using TodoList.Application.DTOs;
using TodoList.Application.UseCases;
using TodoList.Domain;
using TodoList.Domain.Interfaces;

namespace TodoList.Tests.UseCases;

public class GetAllTasksUseCaseTests
{
    private readonly Mock<ITaskRepository> _mockRepository;
    private readonly GetAllTasksUseCase _useCase;

    public GetAllTasksUseCaseTests()
    {
        _mockRepository = new Mock<ITaskRepository>();
        _useCase = new GetAllTasksUseCase(_mockRepository.Object);
    }

    [Fact]
    public async Task ExecuteAsync_WithExistingTasks_ShouldReturnAllTasks()
    {
        // Arrange
        var tasks = new List<TaskEntity>
        {
            new TaskEntity { Id = 1, Title = "Task 1", IsCompleted = false, CreatedAt = DateTime.UtcNow },
            new TaskEntity { Id = 2, Title = "Task 2", IsCompleted = true, CreatedAt = DateTime.UtcNow.AddDays(-1) }
        };

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(tasks);

        // Act
        var result = await _useCase.ExecuteAsync();

        // Assert
        Assert.NotNull(result);
        var resultList = result.ToList();
        Assert.Equal(2, resultList.Count);

        Assert.Equal(tasks[0].Id, resultList[0].Id);
        Assert.Equal(tasks[0].Title, resultList[0].Title);
        Assert.Equal(tasks[1].Id, resultList[1].Id);
        Assert.Equal(tasks[1].Title, resultList[1].Title);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    [Fact]
    public async Task ExecuteAsync_WithNoTasks_ShouldReturnEmptyList()
    {
        // Arrange
        var emptyTasks = new List<TaskEntity>();

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(emptyTasks);

        // Act
        var result = await _useCase.ExecuteAsync();

        // Assert
        Assert.NotNull(result);
        Assert.Empty(result);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }
}