using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Moq;
using TodoList.Api.Controllers;
using TodoList.Application.DTOs;
using TodoList.Application.UseCases;
using TodoList.Domain.Interfaces;
using Xunit;

namespace TodoList.Tests.Controllers;

public class TaskControllerTests
{
    private readonly Mock<ITaskRepository> _mockRepository;
    private readonly TaskController _controller;

    public TaskControllerTests()
    {
        _mockRepository = new Mock<ITaskRepository>();
        
        var createTaskUseCase = new CreateTaskUseCase(_mockRepository.Object);
        var getAllTasksUseCase = new GetAllTasksUseCase(_mockRepository.Object);
        var getTaskByIdUseCase = new GetTaskByIdUseCase(_mockRepository.Object);
        var updateTaskUseCase = new UpdateTaskUseCase(_mockRepository.Object);
        var deleteTaskUseCase = new DeleteTaskUseCase(_mockRepository.Object);

        _controller = new TaskController(
            createTaskUseCase,
            getAllTasksUseCase,
            getTaskByIdUseCase,
            updateTaskUseCase,
            deleteTaskUseCase);
    }

    #region CreateTask Tests

    [Fact]
    public async Task CreateTask_WithValidData_ShouldReturnCreatedResult()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = "Test Task" };
        var expectedTask = new Domain.TaskEntity
        {
            Id = 1,
            Title = "Test Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()))
                      .ReturnsAsync(expectedTask);

        // Act
        var result = await _controller.CreateTask(createTaskDto);

        // Assert
        var createdResult = Assert.IsType<CreatedAtActionResult>(result);
        Assert.Equal(StatusCodes.Status201Created, createdResult.StatusCode);
        
        var responseDto = Assert.IsType<TaskResponseDto>(createdResult.Value);
        Assert.Equal(expectedTask.Title, responseDto.Title);

        _mockRepository.Verify(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()), Times.Once);
    }

    [Fact]
    public async Task CreateTask_WithNullTitle_ShouldThrowArgumentException()
    {
        // Arrange
        var createTaskDto = new CreateTaskDto { Title = null! };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.CreateTask(createTaskDto));
        Assert.Equal("Título é obrigatório. (Parameter 'Title')", exception.Message);

        _mockRepository.Verify(r => r.CreateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    #endregion

    #region GetAllTasks Tests

    [Fact]
    public async Task GetAllTasks_ShouldReturnOkWithTaskList()
    {
        // Arrange
        var expectedTasks = new List<Domain.TaskEntity>
        {
            new() { Id = 1, Title = "Task 1", IsCompleted = false, CreatedAt = DateTime.UtcNow },
            new() { Id = 2, Title = "Task 2", IsCompleted = true, CreatedAt = DateTime.UtcNow.AddHours(-1) }
        };

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(expectedTasks);

        // Act
        var result = await _controller.GetAllTasks();

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        Assert.Equal(StatusCodes.Status200OK, okResult.StatusCode);
        
        var responseDtos = Assert.IsAssignableFrom<IEnumerable<TaskResponseDto>>(okResult.Value);
        var responseList = responseDtos.ToList();
        
        Assert.Equal(2, responseList.Count);
        Assert.Equal("Task 1", responseList[0].Title);
        Assert.Equal("Task 2", responseList[1].Title);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    [Fact]
    public async Task GetAllTasks_WithEmptyList_ShouldReturnOkWithEmptyList()
    {
        // Arrange
        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(new List<Domain.TaskEntity>());

        // Act
        var result = await _controller.GetAllTasks();

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        var responseDtos = Assert.IsAssignableFrom<IEnumerable<TaskResponseDto>>(okResult.Value);
        Assert.Empty(responseDtos);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    #endregion

    #region GetTaskById Tests

    [Fact]
    public async Task GetTaskById_WithValidId_ShouldReturnOkWithTask()
    {
        // Arrange
        var taskId = 1;
        var expectedTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Test Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(expectedTask);

        // Act
        var result = await _controller.GetTaskById(taskId);

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        var responseDto = Assert.IsType<TaskResponseDto>(okResult.Value);
        Assert.Equal(expectedTask.Title, responseDto.Title);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
    }

    [Fact]
    public async Task GetTaskById_WithInvalidId_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 0;

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.GetTaskById(taskId));
        Assert.Equal("Id deve ser maior que zero. (Parameter 'id')", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
    }

    #endregion

    #region UpdateTask Tests

    [Fact]
    public async Task UpdateTask_WithValidData_ShouldReturnOkWithUpdatedTask()
    {
        // Arrange
        var taskId = 1;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };
        var existingTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Original Task",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow.AddHours(-1)
        };
        var updatedTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Updated Task",
            IsCompleted = true,
            CreatedAt = existingTask.CreatedAt
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()))
                      .ReturnsAsync(updatedTask);

        // Act
        var result = await _controller.UpdateTask(taskId, updateTaskDto);

        // Assert
        var okResult = Assert.IsType<OkObjectResult>(result);
        var responseDto = Assert.IsType<TaskResponseDto>(okResult.Value);
        Assert.Equal("Updated Task", responseDto.Title);
        Assert.True(responseDto.IsCompleted);

        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()), Times.Once);
    }

    [Fact]
    public async Task UpdateTask_WithInvalidId_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 0;
        var updateTaskDto = new UpdateTaskDto { Title = "Updated Task", IsCompleted = true };

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.UpdateTask(taskId, updateTaskDto));
        Assert.Equal("ID deve ser maior que zero. (Parameter 'id')", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.UpdateTask(It.IsAny<Domain.TaskEntity>()), Times.Never);
    }

    #endregion

    #region DeleteTask Tests

    [Fact]
    public async Task DeleteTask_WithValidId_ShouldReturnNoContent()
    {
        // Arrange
        var taskId = 1;
        var existingTask = new Domain.TaskEntity
        {
            Id = taskId,
            Title = "Task to Delete",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.DeleteTask(taskId))
                      .Returns(Task.CompletedTask);

        // Act
        var result = await _controller.DeleteTask(taskId);

        // Assert
        var noContentResult = Assert.IsType<NoContentResult>(result);
        Assert.Equal(StatusCodes.Status204NoContent, noContentResult.StatusCode);

        _mockRepository.Verify(r => r.DeleteTask(taskId), Times.Once);
    }

    [Fact]
    public async Task DeleteTask_WithInvalidId_ShouldThrowArgumentException()
    {
        // Arrange
        var taskId = 0;

        // Act & Assert
        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _controller.DeleteTask(taskId));
        Assert.Equal("ID deve ser maior que zero", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.DeleteTask(It.IsAny<int>()), Times.Never);
    }

    #endregion
}