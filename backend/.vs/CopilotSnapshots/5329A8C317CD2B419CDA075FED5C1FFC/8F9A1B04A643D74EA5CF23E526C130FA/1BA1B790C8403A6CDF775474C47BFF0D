using Moq;
using TodoList.Application.UseCases;
using TodoList.Domain;
using TodoList.Domain.Interfaces;
using Xunit;

namespace TodoList.Tests.UseCases;

public class DeleteTaskUseCaseTests
{
    private readonly Mock<ITaskRepository> _mockRepository;
    private readonly DeleteTaskUseCase _useCase;

    public DeleteTaskUseCaseTests()
    {
        _mockRepository = new Mock<ITaskRepository>();
        _useCase = new DeleteTaskUseCase(_mockRepository.Object);
    }

    [Fact]
    public async Task ExecuteAsync_WithValidId_ShouldDeleteTask()
    {
        var taskId = 1;
        var existingTask = new TaskEntity
        {
            Id = taskId,
            Title = "Task to Delete",
            IsCompleted = false,
            CreatedAt = DateTime.UtcNow
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.DeleteTask(taskId))
                      .Returns(Task.CompletedTask);

        await _useCase.ExecuteAsync(taskId);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.DeleteTask(taskId), Times.Once);
    }

    [Fact]
    public async Task ExecuteAsync_WithZeroId_ShouldThrowArgumentException()
    {
        var taskId = 0;

        var exception = await Assert.ThrowsAsync<ArgumentException>(() => _useCase.ExecuteAsync(taskId));
        Assert.Equal("ID deve ser maior que zero", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(It.IsAny<int>()), Times.Never);
        _mockRepository.Verify(r => r.DeleteTask(It.IsAny<int>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_WithNonExistentId_ShouldThrowInvalidOperationException()
    {
        var taskId = 999;

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync((TaskEntity?)null);

        var exception = await Assert.ThrowsAsync<InvalidOperationException>(() => _useCase.ExecuteAsync(taskId));
        Assert.Equal($"Tarefa com ID {taskId} não encontrada.", exception.Message);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.DeleteTask(It.IsAny<int>()), Times.Never);
    }

    [Fact]
    public async Task ExecuteAsync_WithCompletedTask_ShouldDeleteSuccessfully()
    {
        var taskId = 1;
        var existingTask = new TaskEntity
        {
            Id = taskId,
            Title = "Completed Task to Delete",
            IsCompleted = true,
            CreatedAt = DateTime.UtcNow.AddDays(-1)
        };

        _mockRepository.Setup(r => r.GetTaskById(taskId))
                      .ReturnsAsync(existingTask);
        _mockRepository.Setup(r => r.DeleteTask(taskId))
                      .Returns(Task.CompletedTask);

        await _useCase.ExecuteAsync(taskId);

        _mockRepository.Verify(r => r.GetTaskById(taskId), Times.Once);
        _mockRepository.Verify(r => r.DeleteTask(taskId), Times.Once);
    }
}