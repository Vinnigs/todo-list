using Xunit;
using Moq;
using TodoList.Application.DTOs;
using TodoList.Application.UseCases;
using TodoList.Domain;
using TodoList.Domain.Interfaces;

namespace TodoList.Tests.UseCases;

public class GetAllTasksUseCaseTests
{
    private readonly Mock<ITaskRepository> _mockRepository;
    private readonly GetAllTasksUseCase _useCase;

    public GetAllTasksUseCaseTests()
    {
        _mockRepository = new Mock<ITaskRepository>();
        _useCase = new GetAllTasksUseCase(_mockRepository.Object);
    }

    [Fact]
    public async Task ExecuteAsync_WithExistingTasks_ShouldReturnAllTasks()
    {
        // Arrange
        var tasks = new List<TaskEntity>
        {
            new TaskEntity { Id = 1, Title = "Task 1", IsCompleted = false, CreatedAt = DateTime.UtcNow },
            new TaskEntity { Id = 2, Title = "Task 2", IsCompleted = true, CreatedAt = DateTime.UtcNow.AddDays(-1) },
            new TaskEntity { Id = 3, Title = "Task 3", IsCompleted = false, CreatedAt = DateTime.UtcNow.AddDays(-2) }
        };

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(tasks);

        // Act
        var result = await _useCase.ExecuteAsync();

        // Assert
        Assert.NotNull(result);
        var resultList = result.ToList();
        Assert.Equal(3, resultList.Count);

        // Verificar se todos os dados foram mapeados corretamente
        for (int i = 0; i < tasks.Count; i++)
        {
            Assert.Equal(tasks[i].Id, resultList[i].Id);
            Assert.Equal(tasks[i].Title, resultList[i].Title);
            Assert.Equal(tasks[i].IsCompleted, resultList[i].IsCompleted);
            Assert.Equal(tasks[i].CreatedAt, resultList[i].CreatedAt);
        }

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    [Fact]
    public async Task ExecuteAsync_WithNoTasks_ShouldReturnEmptyList()
    {
        // Arrange
        var emptyTasks = new List<TaskEntity>();

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(emptyTasks);

        // Act
        var result = await _useCase.ExecuteAsync();

        // Assert
        Assert.NotNull(result);
        Assert.Empty(result);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    [Fact]
    public async Task ExecuteAsync_RepositoryThrowsException_ShouldPropagateException()
    {
        // Arrange
        var expectedMessage = "Database connection error";

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ThrowsAsync(new Exception(expectedMessage));

        // Act & Assert
        var exception = await Assert.ThrowsAsync<Exception>(
            () => _useCase.ExecuteAsync());

        Assert.Equal(expectedMessage, exception.Message);
        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }

    [Fact]
    public async Task ExecuteAsync_WithSingleTask_ShouldReturnSingleTaskCorrectly()
    {
        // Arrange
        var singleTask = new TaskEntity 
        { 
            Id = 1, 
            Title = "Single Task", 
            IsCompleted = true, 
            CreatedAt = DateTime.UtcNow 
        };

        _mockRepository.Setup(r => r.GetAllTasks())
                      .ReturnsAsync(new List<TaskEntity> { singleTask });

        // Act
        var result = await _useCase.ExecuteAsync();

        // Assert
        Assert.NotNull(result);
        var resultList = result.ToList();
        Assert.Single(resultList);

        var taskResult = resultList.First();
        Assert.Equal(singleTask.Id, taskResult.Id);
        Assert.Equal(singleTask.Title, taskResult.Title);
        Assert.Equal(singleTask.IsCompleted, taskResult.IsCompleted);
        Assert.Equal(singleTask.CreatedAt, taskResult.CreatedAt);

        _mockRepository.Verify(r => r.GetAllTasks(), Times.Once);
    }
}